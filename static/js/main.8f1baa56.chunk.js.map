{"version":3,"sources":["index.js"],"names":["Square","props","renderingValue","value","location","currentLocation","x","y","push","style","color","button","winLines","includes","className","onClick","renderingButton","Board","i","this","squares","renderingColumn","row","colRet","num","renderSquare","rowRet","renderingRow","React","Component","Game","state","history","Array","fill","historyLocation","stepNumber","xIsNext","slice","length","location_x","Math","floor","location_y","calculateWinner","setState","concat","step","current","win","winner","lines","status","moves","map","move","desc","jumpTo","console","log","alert","handleClick","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f1baa56.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  const renderingValue = () => {\n    const value = []\n    if (props.location !== props.currentLocation.x * 3 + props.currentLocation.y) {\n      value.push(<span key={props.location}>{props.value}</span>)\n    }\n    else {\n      value.push(<span style={{color:\"red\"}} key={props.location}>{props.value}</span>)\n    }\n    return value\n  }\n  const renderingButton = () => {\n    const button = []\n    if (props.winLines && props.winLines.includes(props.location)) {\n      button.push(\n        <button\n          className=\"square\" onClick={props.onClick}\n          style={{\"backgroundColor\":\"yellow\"}}\n          key={props.location}\n        >\n          <span>{renderingValue()}</span>\n        </button>\n      )\n    }\n    else {\n      button.push(\n        <button\n          className=\"square\" onClick={props.onClick}\n          key={props.location}\n        >\n          <span>{renderingValue()}</span>\n        </button>\n      )\n    }\n    return button\n  }\n  return renderingButton()\n  \n  // if (props.winLines && props.winLines.includes(props.location)) {\n  //   ret.push()\n  //   return (\n  //     <button\n  //     className=\"square\" \n  //     onClick={props.onClick}\n  //     style={{\"background-color\":\"yellow\"}}\n  //     >\n  //       <span>{props.value}</span>\n  //     </button>\n  //   )\n  // }\n  // if (props.location !== props.currentLocation.x * 3 + props.currentLocation.y)  {\n  //   return (\n  //     <button\n  //       className=\"square\" \n  //       onClick={props.onClick}\n  //       >\n  //       {props.value}\n  //     </button>\n  //   );\n  // } else {\n  //   return (\n  //     <button\n  //     className=\"square\" \n  //     onClick={props.onClick}\n  //     >\n  //       <span style={{color:\"red\"}}>{props.value}</span>\n  //     </button>\n  //   );\n  // }\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square \n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        currentLocation={this.props.currentLocation}\n        location={i}\n        winLines={this.props.winLines}\n        key={i}\n      />\n    );\n  }\n\n  render() {\n\n    const renderingColumn = (row) => {\n      const colRet = []\n      for (let i = 0; i < 3; i++){\n        const num = 3 * row + i\n        colRet.push(this.renderSquare(num));\n      }\n      return colRet;\n    };\n\n    const renderingRow = () => {\n      const rowRet = []\n      for (let i = 0; i < 3; i++){\n        rowRet.push(<div className=\"board-row\" key={i}>{renderingColumn(i)}</div>);\n      }\n      return rowRet;\n    };\n    return (<div key={[0,1,2]}>{renderingRow()}</div>);\n    \n    // return (\n    //   <div>\n    //     <div className=\"board-row\">\n    //       {this.renderSquare(0)}\n    //       {this.renderSquare(1)}\n    //       {this.renderSquare(2)}\n    //     </div>\n    //     <div className=\"board-row\">\n    //       {this.renderSquare(3)}\n    //       {this.renderSquare(4)}\n    //       {this.renderSquare(5)}\n    //     </div>\n    //     <div className=\"board-row\">\n    //       {this.renderSquare(6)}\n    //       {this.renderSquare(7)}\n    //       {this.renderSquare(8)}\n    //     </div>\n    //   </div>\n    // );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      historyLocation:[{\n        x: null,\n        y: null,\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i){\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const historyLocation = this.state.historyLocation.slice(0, this.state.stepNumber + 1);\n\n    const location_x = Math.floor(i / 3);\n    const location_y = i % 3;\n    \n    if (calculateWinner(squares) || squares[i]) {\n      return ;\n    }\n    squares[i] = this.state.xIsNext ? 'X': 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      historyLocation: historyLocation.concat([{\n        x: location_x,\n        y: location_y,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step){\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const historyLocation = this.state.historyLocation;\n    const currentLocation = historyLocation[this.state.stepNumber]; \n    const win = calculateWinner(current.squares);\n    let winner = null\n    let winLines = null\n\n    if (win) {\n      winner = win.squares\n      winLines = win.lines\n    }\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #'+ move + ' ('+ historyLocation[move].x+', '+ historyLocation[move].y +')':\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={()=>this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    })\n\n    let status;\n    console.log(this.state.stepNumber)\n    if (winner){\n      status = 'Winner: ' + winner;\n      alert(\"winner: \"+ winner)\n    } else if (this.state.stepNumber===9) {\n      status = \"Draw\"\n      alert(\"Draw\")\n    } else {\n      status = 'Next Player: ' + (this.state.xIsNext ? 'X': 'O') ;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i)=> this.handleClick(i)}\n            currentLocation={currentLocation}\n            winLines={winLines}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {squares: squares[a], lines: lines[i]};\n    }\n  }\n  return null;\n}\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}